{"version":3,"sources":["../src/connection.js"],"names":["DDP_VERSION","OPTIONS_STRUCTURE","URL_VALIDATION","presence","url","schemes","allowLocal","STATE_CLOSED","STATE_OPEN","Connection","server_url","options","socket","messageQueue","online","ajv","coerceTypes","validateOptions","compile","valid","single","Error","set","assign","message","map","errors","pick","e","reduce","r","push","tail","dataPath","join","additional","get","console","error","autoConnect","open","close","stateSubject","ReplaySubject","Socket","prototype","dispatchEvent","event","type","code","onNext","reason","onCompleted","send","msg","version","support","_processMessage","_parseDDP","data","_socket","undefined","transports","TRANSPORTS","session_id","session","id","unset","subscribe","arguments","method","args","Observable","create","observer","params","copy","clone","has","cleared","forEach","fields","value","key","isEmpty","each","field","_adjustTypesToJSONValue","stringMessage","JSON","parse","warn","clearKey","_adjustTypesFromJSONValue"],"mappings":"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","file":"connection.js","sourcesContent":["import _ from 'lodash';\nimport Ajv from 'ajv';\nimport Rx from 'rx';\nimport validate from 'validate.js';\nimport SockJS from 'sockjs-client';\nimport EJSON from 'ejson';\nimport { generateId } from './util';\n\nconst DDP_VERSION = \"1\";\nconst OPTIONS_STRUCTURE = {\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"autoConnect\": { \"type\": \"boolean\", \"default\": false },\n\t\t\"autoReconect\": { \"type\": \"boolean\", \"default\": false },\n\t\t\"reconnectInterval\": { \"type\": \"integer\", \"default\": 10000 }\n\t},\n\t\"additionalProperties\": false\n};\n\nconst URL_VALIDATION = {\n\tpresence: true,\n\turl: {\n\t\tschemes: [\"http\", \"https\", \"ws\", \"wss\"],\n\t\tallowLocal: true\n\t}\n};\n\nconst STATE_CLOSED = 0;\nconst STATE_OPEN = 1;\n\nexport class Connection {\n\n\tstatic TRANSPORTS = [\n\t\t'websocket',\n\t\t'xdr-streaming',\n\t\t'xhr-streaming',\n\t\t'iframe-eventsource',\n\t\t'iframe-htmlfile',\n\t\t'xdr-polling',\n\t\t'xhr-polling',\n\t\t'iframe-xhr-polling',\n\t\t'jsonp-polling'\n\t]\n\n\tmessageQueue = [];\n\tonline = false;\n\n\tconstructor(server_url, options, socket = SockJS) {\n\t\tlet ajv = new Ajv({ coerceTypes: true });\n\t\tlet validateOptions = ajv.compile(OPTIONS_STRUCTURE);\n\t\tlet valid = validateOptions(options);\n\t\tif (options && valid) {\n\t\t\tif (validate.single(server_url, URL_VALIDATION)) {\n\t\t\t\tthrow new Error('Invalid server URL');\n\t\t\t} else {\n\t\t\t\t_.set(this, 'server_url', server_url);\n\t\t\t\t_.assign(this, options);\n\t\t\t}\n\t\t} else if (!valid) {\n\t\t\tlet message = _.map(validate.errors, e => _.pick(e, 'dataPath', 'message', 'params'))\n\t\t\t\t.reduce((r, e) => {\n\t\t\t\t\tr.push(`${_.tail(e.dataPath).join('')} ${e.message}`);\n\t\t\t\t\tlet additional = _.get(e, 'params.additionalProperty');\n\t\t\t\t\tif (additional) {\n\t\t\t\t\t\tr.push(`Invalid property: ${additional}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn r;\n\t\t\t\t}, []);\n\t\t\tconsole.error(message.join('\\n'));\n\t\t\tthrow new Error(message.join('\\n'));\n\t\t}\n\t\tif (!server_url || validate.single(server_url, URL_VALIDATION)) {\n\t\t\tthrow new Error('Invalid server URL');\n\t\t} else {\n\t\t\t_.set(this, 'server_url', server_url);\n\t\t}\n\t\t_.set(this, 'Socket', socket);\n\t\tif (options.autoConnect) {\n\t\t\tthis.open();\n\t\t}\n\t\t// this.remoteObserver = Rx.Observable.fromArray(this.messageQueue);\n\t\t// this.remoteObserver.subscribe(())\n\n\t}\n\n\topen(server_url) {\n\t\tif (server_url) {\n\t\t\tif (validate.single(server_url, URL_VALIDATION)) {\n\t\t\t\tthrow new Error('Invalid server URL');\n\t\t\t} else {\n\t\t\t\t_.set(this, 'server_url', server_url);\n\t\t\t}\n\t\t}\n\t\tthis.close();\n\t\tthis.stateSubject = new Rx.ReplaySubject(1);\n\t\tthis.Socket.prototype.dispatchEvent = (event) => {\n\t\t\t// console.log(event);\n\t\t\tswitch (event.type) {\n\t\t\t\tcase 'close':\n\t\t\t\t\tthis.online = false;\n\t\t\t\t\tif (event.code === 1002) {\n\t\t\t\t\t\tthis.stateSubject.onNext({\n\t\t\t\t\t\t\t\"type\": \"error\",\n\t\t\t\t\t\t\t\"reason\": event.reason\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.stateSubject.onNext({ \"type\": \"closed\" });\n\t\t\t\t\t\tthis.stateSubject.onCompleted();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'open':\n\t\t\t\t\tthis.send({\n\t\t\t\t\t\tmsg: \"connect\",\n\t\t\t\t\t\tversion: DDP_VERSION,\n\t\t\t\t\t\tsupport: [DDP_VERSION]\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._processMessage(Connection._parseDDP(event.data));\n\t\t\t}\n\t\t}\n\t\t// console.log(this.server_url);\n\t\tthis._socket = new this.Socket(this.server_url, undefined, {\n\t\t\ttransports: Connection.TRANSPORTS\n\t\t});\n\t}\n\n\t_processMessage(msg) {\n\t\tswitch (msg.msg) {\n\t\t\tcase 'connected':\n\t\t\t\tthis.online = true;\n\t\t\t\tthis.session_id = msg.session;\n\t\t\t\tthis.stateSubject.onNext({ \"type\": \"connected\" });\n\t\t\t\tbreak;\n\t\t\tcase 'ping':\n\t\t\t\tthis.send({ msg: \"pong\", id: msg.id });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\n\t\t}\n\t}\n\n\t_\n\n\tsend(message) {\n\t\t// if (this._socket.readyState === STATE_OPEN) {\n\t\t// \tthis._socket.send(Connection._stringifyDDP(message));\n\t\t// \tmessageQueue\n\t\t// \t// console.log(this._stringifyDDP(message));\n\t\t// }\n\t}\n\n\tclose() {\n\t\tif (this._socket) {\n\t\t\tthis._socket.close();\n\t\t\t_.unset(this, 'socket');\n\t\t}\n\t}\n\n\tsubscribe( /* arguments */) {\n\t\treturn this.stateSubject.subscribe(...arguments);\n\t}\n\n\tcall(method, ...args) {\n\t\treturn Rx.Observable.create((observer) => {\n\t\t\tlet id = generateId();\n\t\t\t_.set(this, `pending-calls.${id}`, observer);\n\t\t\tthis.messageQueue.push({\n\t\t\t\tmsg: \"method\",\n\t\t\t\tid: id,\n\t\t\t\tmethod: method,\n\t\t\t\tparams: args\n\t\t\t});\n\t\t\t// observer.onNext({ result: \"OK\" });\n\t\t});\n\t}\n\n\tstatic _stringifyDDP(msg) {\n\t\tlet copy = EJSON.clone(msg);\n\t\t// swizzle 'changed' messages from 'fields undefined' rep to 'fields\n\t\t// and cleared' rep\n\t\tif (_.has(msg, 'fields')) {\n\t\t\tlet cleared = [];\n\t\t\t_.forEach(msg.fields, (value, key) => {\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tcleared.push(key);\n\t\t\t\t\tdelete copy.fields[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!_.isEmpty(cleared))\n\t\t\t\tcopy.cleared = cleared;\n\t\t\tif (_.isEmpty(copy.fields))\n\t\t\t\tdelete copy.fields;\n\t\t}\n\t\t// adjust types to basic\n\t\t_.each(['fields', 'params', 'result'], function (field) {\n\t\t\tif (_.has(copy, field))\n\t\t\t\tcopy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\n\t\t});\n\t\tif (msg.id && typeof msg.id !== 'string') {\n\t\t\tthrow new Error(\"Message id is not a string\");\n\t\t}\n\t\treturn JSON.stringify(copy);\n\t}\n\n\tstatic _parseDDP(stringMessage) {\n\t\tlet msg;\n\t\ttry {\n\t\t\tmsg = JSON.parse(stringMessage);\n\t\t} catch (e) {\n\t\t\tconsole.warn(\"Discarding message with invalid JSON\", stringMessage);\n\t\t\treturn null;\n\t\t}\n\t\t// DDP messages must be objects.\n\t\tif (msg === null || typeof msg !== 'object') {\n\t\t\tconsole.warn(\"Discarding non-object DDP message\", stringMessage);\n\t\t\treturn null;\n\t\t}\n\n\t\t// massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.\n\t\t// switch between \"cleared\" rep of unsetting fields and \"undefined\"\n\t\t// rep of same\n\t\tif (_.has(msg, 'cleared')) {\n\t\t\tif (!_.has(msg, 'fields'))\n\t\t\t\tmsg.fields = {};\n\t\t\t_.forEach(msg.cleared, (clearKey) => {\n\t\t\t\tmsg.fields[clearKey] = undefined;\n\t\t\t});\n\t\t\tdelete msg.cleared;\n\t\t}\n\n\t\t_.forEach(['fields', 'params', 'result'], function (field) {\n\t\t\tif (_.has(msg, field))\n\t\t\t\tmsg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\n\t\t});\n\n\t\treturn msg;\n\t}\n}\n"]}